{"version":3,"file":"static/js/151.4769b736.chunk.js","mappings":"uOAiHA,UAhGA,WAEE,OAAwBA,EAAAA,EAAAA,UAAS,CAC/B,CAAEC,IAAK,UAAWC,IAAK,WACvB,CAAED,IAAK,QAASC,IAAK,WACrB,CAAED,IAAK,SAAUC,IAAK,aAHxB,eAAOC,EAAP,KAAaC,EAAb,KAOMC,GAAaC,EAAAA,EAAAA,QAAO,MACpBC,GAAeD,EAAAA,EAAAA,QAAO,IAGtBE,GAASC,EAAAA,EAAAA,cAAY,WACzB,GAAIJ,EAAWK,QAAS,CACtB,IAAMC,EAAWN,EAAWK,QACzBE,UACAC,WACAC,KAAI,SAACC,GACJ,MAAO,CAAEd,IAAKc,EAAOd,MAAOC,IAAKa,EAAOb,UAE5CE,EAAQO,MAET,CAACP,IAGEY,GAASP,EAAAA,EAAAA,cACb,SAACQ,GACCZ,EAAWK,QAAUO,EACrB,IAAMd,EAAOc,EAAQL,UACrBL,EAAaG,QAAQQ,KACnBf,EAAKgB,YAAY,SAAUX,GAC3BL,EAAKgB,YAAY,YAAaX,GAC9BL,EAAKgB,YAAY,YAAaX,MAGlC,CAACA,IAIGY,GAAYX,EAAAA,EAAAA,cAAY,WAC5BF,EAAaG,QAAQW,SAAQ,SAACC,GAAD,OAASA,EAAIC,YAC1ClB,EAAWK,QAAU,OACpB,IAUH,OARAc,EAAAA,EAAAA,YAAU,WACRC,QAAQC,IAAIvB,KAKX,CAACA,KAGF,iBAAKwB,GAAG,MAAR,WACE,SAAC,KAAD,CACEA,GAAG,gBACHC,iBAAiB,GACjBC,SAAS,KACTC,OAAO,KAJT,UAME,SAAC,KAAD,CACEC,sBAAsB,UACtBC,OAAQ,CAAE/B,IAAK,QAASC,IAAK,WAC7B+B,KAAM,GAHR,UAKE,SAAC,KAAD,CAEEC,UAAQ,EACRC,WAAS,EACThC,KAAMA,EAENiC,UAAW5B,EAEX6B,UAAW7B,EACXQ,OAAQA,EACRI,UAAWA,SAIjB,SAAC,IAAD,CAAWkB,SAAS,KAApB,UACE,SAAC,IAAD,CACEC,UAAU,OACVC,UAAU,EACVC,SAAS,EACTC,QAAQ,SACRC,SAAS,YACTC,QAAQ,gBACRC,SAAS,4BAGb,SAAC,IAAD,S,wICrGAC,GAAYC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,CAAH,kMAkEf,IA1DkB,SAACE,GAwBjB,OAvBAzB,EAAAA,EAAAA,YAAU,WACR0B,IAAAA,KAAS,CAEPC,SAAS,EACTC,WAAY,mBACZC,cAAe,WACfC,kBAAmB,cACnBC,eAAe,EACfC,yBAAyB,EACzBC,cAAe,GACfC,cAAe,GAGfC,OAAQ,IACRC,MAAO,EACPC,SAAU,IACVC,OAAQ,OACRC,MAAM,EACNC,QAAQ,EACRC,gBAAiB,eAEnBf,IAAAA,cAGA,UAAC,IAAD,CACEgB,GAAI,EACJC,QAAQ,OACRC,WAAW,cACXC,eAAe,gBACf,WAAS,UACT,iBAAe,KACf,oBAAkB,MAClB,kBAAgB,UARlB,WAUE,SAAC,KAAD,CAAMC,GAAE,sBAAiBrB,EAAMN,UAA/B,UACE,SAAC,IAAD,CACE4B,MAAM,UACNC,SAAS,SAAC1B,EAAD,IACT2B,QAAQ,WACRC,UAAWzB,EAAMR,QACjBkC,KAAK,QALP,SAOG1B,EAAMJ,aAIVI,EAAMT,WACL,SAAC,KAAD,CAAM8B,GAAE,sBAAiBrB,EAAMP,SAA/B,UACE,SAAC,IAAD,CAAQ6B,MAAM,QAAQC,SAAS,SAAC,IAAD,IAAqBG,KAAK,QAAzD,SACG1B,EAAML","sources":["components/modules/pages/admin/Delivery.tsx","components/modules/shared/BottomNav.tsx"],"sourcesContent":["import React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { LoadScript, GoogleMap, Polygon } from '@react-google-maps/api';\nimport BottomNav from '../../shared/BottomNav';\nimport Footer from '../../shared/Footer';\nimport { Container } from '@mui/material';\n\n// This example presents a way to handle editing a Polygon\n// The objective is to get the new path on every editing event :\n// - on dragging the whole Polygon\n// - on moving one of the existing points (vertex)\n// - on adding a new point by dragging an edge point (midway between two vertices)\n\n// We achieve it by defining refs for the google maps API Polygon instances and listeners with `useRef`\n// Then we bind those refs to the currents instances with the help of `onLoad`\n// Then we get the new path value with the `onEdit` `useCallback` and pass it to `setPath`\n// Finally we clean up the refs with `onUnmount`\n\nfunction Delivery() {\n  // Store Polygon path in state\n  const [path, setPath] = useState([\n    { lat: 35.689198, lng: 51.388973 },\n    { lat: 35.7792, lng: 51.389973 },\n    { lat: 35.79921, lng: 51.499973 }\n  ]);\n\n  // Define refs for Polygon instance and listeners\n  const polygonRef = useRef(null);\n  const listenersRef = useRef([]);\n\n  // Call setPath with new edited path\n  const onEdit = useCallback(() => {\n    if (polygonRef.current) {\n      const nextPath = polygonRef.current\n        .getPath()\n        .getArray()\n        .map((latLng: { lat: () => any; lng: () => any }) => {\n          return { lat: latLng.lat(), lng: latLng.lng() };\n        });\n      setPath(nextPath);\n    }\n  }, [setPath]);\n\n  // Bind refs to current Polygon and listeners\n  const onLoad = useCallback(\n    (polygon: { getPath: () => any }) => {\n      polygonRef.current = polygon;\n      const path = polygon.getPath();\n      listenersRef.current.push(\n        path.addListener('set_at', onEdit),\n        path.addListener('insert_at', onEdit),\n        path.addListener('remove_at', onEdit)\n      );\n    },\n    [onEdit]\n  );\n\n  // Clean up refs\n  const onUnmount = useCallback(() => {\n    listenersRef.current.forEach((lis) => lis.remove());\n    polygonRef.current = null;\n  }, []);\n\n  useEffect(() => {\n    console.log(path);\n\n    /**\n     * send path to mostafa\n     */\n  }, [path]);\n\n  return (\n    <div id=\"Map\">\n      <LoadScript\n        id=\"script-loader\"\n        googleMapsApiKey=\"\"\n        language=\"en\"\n        region=\"us\"\n      >\n        <GoogleMap\n          mapContainerClassName=\"App-map\"\n          center={{ lat: 35.7502, lng: 51.450973 }}\n          zoom={12}\n        >\n          <Polygon\n            // Make the Polygon editable / draggable\n            editable\n            draggable\n            path={path}\n            // Event used when manipulating and adding points\n            onMouseUp={onEdit}\n            // Event used when dragging the whole Polygon\n            onDragEnd={onEdit}\n            onLoad={onLoad}\n            onUnmount={onUnmount}\n          />\n        </GoogleMap>\n      </LoadScript>\n      <Container maxWidth=\"lg\">\n        <BottomNav\n          className=\"pt-5\"\n          nextStep={true}\n          preStep={true}\n          forLink=\"tables\"\n          backLink=\"mobileApp\"\n          forText=\"Table manager\"\n          backText=\"Configure Mobile App\"\n        />\n      </Container>\n      <Footer />\n    </div>\n  );\n}\n\nexport default Delivery;\n","import React, { useEffect } from 'react';\nimport AOS from 'aos';\nimport { Link } from 'react-router-dom';\nimport { Box, Button } from '@mui/material';\nimport DoubleArrowIcon from '@mui/icons-material/DoubleArrow';\nimport styled from 'styled-components';\n\nconst LeftArrow = styled(DoubleArrowIcon)`\n  -webkit-transform: rotate(180deg);\n  -moz-transform: rotate(180deg);\n  -ms-transform: rotate(180deg);\n  -o-transform: rotate(180deg);\n  transform: rotate(180deg);\n`;\n\nconst BottomNav = (props: any) => {\n  useEffect(() => {\n    AOS.init({\n      // Global settings:\n      disable: false, // accepts following values: 'phone', 'tablet', 'mobile', boolean, expression or function\n      startEvent: 'DOMContentLoaded', // name of the event dispatched on the document, that AOS should initialize on\n      initClassName: 'aos-init', // class applied after initialization\n      animatedClassName: 'aos-animate', // class applied on animation\n      useClassNames: false, // if true, will add content of `data-aos` as classes on scroll\n      disableMutationObserver: false, // disables automatic mutations' detections (advanced)\n      debounceDelay: 50, // the delay on debounce used while resizing window (advanced)\n      throttleDelay: 99, // the delay on throttle used while scrolling the page (advanced)\n\n      // Settings that can be overridden on per-element basis, by `data-aos-*` attributes:\n      offset: 120, // offset (in px) from the original trigger point\n      delay: 0, // values from 0 to 3000, with step 50ms\n      duration: 400, // values from 0 to 3000, with step 50ms\n      easing: 'ease', // default easing for AOS animations\n      once: true, // whether animation should happen only once - while scrolling down\n      mirror: false, // whether elements should animate out while scrolling past them\n      anchorPlacement: 'top-bottom' // defines which position of the element regarding to window should trigger the animation\n    });\n    AOS.refresh();\n  });\n  return (\n    <Box\n      pt={3}\n      display=\"flex\"\n      alignItems=\"flex-center\"\n      justifyContent=\"space-between\"\n      data-aos=\"fade-up\"\n      data-aos-delay=\"50\"\n      data-aos-duration=\"400\"\n      data-aos-easing=\"ease-in\"\n    >\n      <Link to={`/dashboards/${props.backLink}`}>\n        <Button\n          color=\"success\"\n          endIcon={<LeftArrow />}\n          variant=\"outlined\"\n          disabled={!props.preStep}\n          size=\"small\"\n        >\n          {props.backText}\n        </Button>\n      </Link>\n\n      {props.nextStep && (\n        <Link to={`/dashboards/${props.forLink}`}>\n          <Button color=\"error\" endIcon={<DoubleArrowIcon />} size=\"small\">\n            {props.forText}\n          </Button>\n        </Link>\n      )}\n    </Box>\n  );\n};\n\nexport default BottomNav;\n"],"names":["useState","lat","lng","path","setPath","polygonRef","useRef","listenersRef","onEdit","useCallback","current","nextPath","getPath","getArray","map","latLng","onLoad","polygon","push","addListener","onUnmount","forEach","lis","remove","useEffect","console","log","id","googleMapsApiKey","language","region","mapContainerClassName","center","zoom","editable","draggable","onMouseUp","onDragEnd","maxWidth","className","nextStep","preStep","forLink","backLink","forText","backText","LeftArrow","styled","DoubleArrowIcon","props","AOS","disable","startEvent","initClassName","animatedClassName","useClassNames","disableMutationObserver","debounceDelay","throttleDelay","offset","delay","duration","easing","once","mirror","anchorPlacement","pt","display","alignItems","justifyContent","to","color","endIcon","variant","disabled","size"],"sourceRoot":""}