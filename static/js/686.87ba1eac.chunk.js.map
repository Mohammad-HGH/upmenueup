{"version":3,"file":"static/js/686.87ba1eac.chunk.js","mappings":"uOAiHA,UAhGA,WAEE,OAAwBA,EAAAA,EAAAA,UAAS,CAC/B,CAAEC,IAAK,UAAWC,IAAK,WACvB,CAAED,IAAK,QAASC,IAAK,WACrB,CAAED,IAAK,SAAUC,IAAK,aAHxB,eAAOC,EAAP,KAAaC,EAAb,KAOMC,GAAaC,EAAAA,EAAAA,QAAO,MACpBC,GAAeD,EAAAA,EAAAA,QAAO,IAGtBE,GAASC,EAAAA,EAAAA,cAAY,WACzB,GAAIJ,EAAWK,QAAS,CACtB,IAAMC,EAAWN,EAAWK,QACzBE,UACAC,WACAC,KAAI,SAACC,GACJ,MAAO,CAAEd,IAAKc,EAAOd,MAAOC,IAAKa,EAAOb,MACzC,IACHE,EAAQO,EACT,CACF,GAAE,CAACP,IAGEY,GAASP,EAAAA,EAAAA,cACb,SAACQ,GACCZ,EAAWK,QAAUO,EACrB,IAAMd,EAAOc,EAAQL,UACrBL,EAAaG,QAAQQ,KACnBf,EAAKgB,YAAY,SAAUX,GAC3BL,EAAKgB,YAAY,YAAaX,GAC9BL,EAAKgB,YAAY,YAAaX,GAEjC,GACD,CAACA,IAIGY,GAAYX,EAAAA,EAAAA,cAAY,WAC5BF,EAAaG,QAAQW,SAAQ,SAACC,GAAD,OAASA,EAAIC,QAAb,IAC7BlB,EAAWK,QAAU,IACtB,GAAE,IAUH,OARAc,EAAAA,EAAAA,YAAU,WACRC,QAAQC,IAAIvB,EAKb,GAAE,CAACA,KAGF,iBAAKwB,GAAG,MAAR,WACE,SAAC,KAAD,CACEA,GAAG,gBACHC,iBAAiB,GACjBC,SAAS,KACTC,OAAO,KAJT,UAME,SAAC,KAAD,CACEC,sBAAsB,UACtBC,OAAQ,CAAE/B,IAAK,QAASC,IAAK,WAC7B+B,KAAM,GAHR,UAKE,SAAC,KAAD,CAEEC,UAAQ,EACRC,WAAS,EACThC,KAAMA,EAENiC,UAAW5B,EAEX6B,UAAW7B,EACXQ,OAAQA,EACRI,UAAWA,SAIjB,SAAC,IAAD,CAAWkB,SAAS,KAApB,UACE,SAAC,IAAD,CACEC,UAAU,OACVC,UAAU,EACVC,SAAS,EACTC,QAAQ,SACRC,SAAS,YACTC,QAAQ,gBACRC,SAAS,4BAGb,SAAC,IAAD,MAGL,C,sHCzGKC,GAAYC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,CAAH,kMA2Cf,IAnCkB,SAACE,GACjB,OACE,UAAC,IAAD,CACEC,GAAI,EACJC,QAAQ,OACRC,WAAW,cACXC,eAAe,gBAJjB,WAME,SAAC,IAAD,CACEC,MAAM,QACNC,WAAW,SAACT,EAAD,IACXU,QAAQ,WACRC,UAAWR,EAAMR,QACjBiB,KAAK,QACLC,UAAWC,EAAAA,GACXC,GAAE,sBAAiBZ,EAAMN,UAP3B,SASGM,EAAMJ,WAGRI,EAAMT,WACL,SAAC,IAAD,CACEc,MAAM,UACNK,UAAWC,EAAAA,GACXC,GAAE,sBAAiBZ,EAAMP,SACzBoB,SAAS,SAAC,IAAD,IACTJ,KAAK,QALP,SAOGT,EAAML,YAKhB,C","sources":["components/pages/admin/Delivery.tsx","shared/BottomNav.tsx"],"sourcesContent":["import React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { LoadScript, GoogleMap, Polygon } from '@react-google-maps/api';\nimport BottomNav from '../../../shared/BottomNav';\nimport Footer from '../../../shared/Footer';\nimport { Container } from '@mui/material';\n\n// This example presents a way to handle editing a Polygon\n// The objective is to get the new path on every editing event :\n// - on dragging the whole Polygon\n// - on moving one of the existing points (vertex)\n// - on adding a new point by dragging an edge point (midway between two vertices)\n\n// We achieve it by defining refs for the google maps API Polygon instances and listeners with `useRef`\n// Then we bind those refs to the currents instances with the help of `onLoad`\n// Then we get the new path value with the `onEdit` `useCallback` and pass it to `setPath`\n// Finally we clean up the refs with `onUnmount`\n\nfunction Delivery() {\n  // Store Polygon path in state\n  const [path, setPath] = useState([\n    { lat: 35.689198, lng: 51.388973 },\n    { lat: 35.7792, lng: 51.389973 },\n    { lat: 35.79921, lng: 51.499973 }\n  ]);\n\n  // Define refs for Polygon instance and listeners\n  const polygonRef = useRef(null);\n  const listenersRef = useRef([]);\n\n  // Call setPath with new edited path\n  const onEdit = useCallback(() => {\n    if (polygonRef.current) {\n      const nextPath = polygonRef.current\n        .getPath()\n        .getArray()\n        .map((latLng: { lat: () => any; lng: () => any }) => {\n          return { lat: latLng.lat(), lng: latLng.lng() };\n        });\n      setPath(nextPath);\n    }\n  }, [setPath]);\n\n  // Bind refs to current Polygon and listeners\n  const onLoad = useCallback(\n    (polygon: { getPath: () => any }) => {\n      polygonRef.current = polygon;\n      const path = polygon.getPath();\n      listenersRef.current.push(\n        path.addListener('set_at', onEdit),\n        path.addListener('insert_at', onEdit),\n        path.addListener('remove_at', onEdit)\n      );\n    },\n    [onEdit]\n  );\n\n  // Clean up refs\n  const onUnmount = useCallback(() => {\n    listenersRef.current.forEach((lis) => lis.remove());\n    polygonRef.current = null;\n  }, []);\n\n  useEffect(() => {\n    console.log(path);\n\n    /**\n     * send path to mostafa\n     */\n  }, [path]);\n\n  return (\n    <div id=\"Map\">\n      <LoadScript\n        id=\"script-loader\"\n        googleMapsApiKey=\"\"\n        language=\"en\"\n        region=\"us\"\n      >\n        <GoogleMap\n          mapContainerClassName=\"App-map\"\n          center={{ lat: 35.7502, lng: 51.450973 }}\n          zoom={12}\n        >\n          <Polygon\n            // Make the Polygon editable / draggable\n            editable\n            draggable\n            path={path}\n            // Event used when manipulating and adding points\n            onMouseUp={onEdit}\n            // Event used when dragging the whole Polygon\n            onDragEnd={onEdit}\n            onLoad={onLoad}\n            onUnmount={onUnmount}\n          />\n        </GoogleMap>\n      </LoadScript>\n      <Container maxWidth=\"lg\">\n        <BottomNav\n          className=\"pt-5\"\n          nextStep={true}\n          preStep={true}\n          forLink=\"tables\"\n          backLink=\"mobileApp\"\n          forText=\"Table manager\"\n          backText=\"Configure Mobile App\"\n        />\n      </Container>\n      <Footer />\n    </div>\n  );\n}\n\nexport default Delivery;\n","import React, { useEffect } from 'react';\nimport { Box, Button, styled } from '@mui/material';\nimport DoubleArrowIcon from '@mui/icons-material/DoubleArrow';\n\nimport { NavLink as RouterLink } from 'react-router-dom';\n\nconst LeftArrow = styled(DoubleArrowIcon)`\n  -webkit-transform: rotate(180deg);\n  -moz-transform: rotate(180deg);\n  -ms-transform: rotate(180deg);\n  -o-transform: rotate(180deg);\n  transform: rotate(180deg);\n`;\n\nconst BottomNav = (props: any) => {\n  return (\n    <Box\n      pt={3}\n      display=\"flex\"\n      alignItems=\"flex-center\"\n      justifyContent=\"space-between\"\n    >\n      <Button\n        color=\"error\"\n        startIcon={<LeftArrow />}\n        variant=\"outlined\"\n        disabled={!props.preStep}\n        size=\"small\"\n        component={RouterLink}\n        to={`/dashboards/${props.backLink}`}\n      >\n        {props.backText}\n      </Button>\n\n      {props.nextStep && (\n        <Button\n          color=\"success\"\n          component={RouterLink}\n          to={`/dashboards/${props.forLink}`}\n          endIcon={<DoubleArrowIcon />}\n          size=\"small\"\n        >\n          {props.forText}\n        </Button>\n      )}\n    </Box>\n  );\n};\n\nexport default BottomNav;\n"],"names":["useState","lat","lng","path","setPath","polygonRef","useRef","listenersRef","onEdit","useCallback","current","nextPath","getPath","getArray","map","latLng","onLoad","polygon","push","addListener","onUnmount","forEach","lis","remove","useEffect","console","log","id","googleMapsApiKey","language","region","mapContainerClassName","center","zoom","editable","draggable","onMouseUp","onDragEnd","maxWidth","className","nextStep","preStep","forLink","backLink","forText","backText","LeftArrow","styled","DoubleArrowIcon","props","pt","display","alignItems","justifyContent","color","startIcon","variant","disabled","size","component","RouterLink","to","endIcon"],"sourceRoot":""}