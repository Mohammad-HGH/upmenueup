{"version":3,"file":"static/js/8248.f30f4a32.chunk.js","mappings":"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","sources":["components/modules/auth/SignIn.tsx"],"sourcesContent":["import { Helmet } from 'react-helmet-async';\nimport {\n  Container,\n  Grid,\n  Card,\n  CardHeader,\n  Divider,\n  Typography,\n  Checkbox,\n  Box,\n  OutlinedInput\n} from '@mui/material';\nimport Footer from 'src/components/modules/shared/Footer';\nimport TextField from '@mui/material/TextField';\nimport { pink } from '@mui/material/colors';\nimport styled from 'styled-components';\nimport { Button, Form } from 'antd';\nimport { userSignIn } from 'src/store/actions';\nimport { useTypedDispatch } from 'src/store';\nimport { Link } from 'react-router-dom';\nimport { Toaster } from 'react-hot-toast';\nimport { useNavigate } from 'react-router';\n\nimport * as React from 'react';\nimport IconButton from '@mui/material/IconButton';\nimport InputLabel from '@mui/material/InputLabel';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport FormControl from '@mui/material/FormControl';\nimport Visibility from '@mui/icons-material/Visibility';\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\n\nconst MyButton = styled(Button)`\n  display: -webkit-inline-box;\n  display: -webkit-inline-flex;\n  display: -ms-inline-flexbox;\n  display: inline-flex;\n  -webkit-align-items: center;\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  -webkit-justify-content: center;\n  justify-content: center;\n  position: relative;\n  box-sizing: border-box;\n  -webkit-tap-highlight-color: transparent;\n  background-color: transparent;\n  outline: 0;\n  border: 0;\n  margin: 0;\n  border-radius: 0;\n  padding: 0;\n  cursor: pointer;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  vertical-align: middle;\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  -webkit-text-decoration: none;\n  text-decoration: none;\n  color: inherit;\n  border-radius: 6px;\n  font-weight: 600;\n  font-size: 0.875rem;\n  line-height: 1.75;\n  text-transform: uppercase;\n  min-width: 64px;\n  padding: 5px 15px;\n  border-radius: 10px;\n  -webkit-transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\n    border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\n    border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  border: 1px solid rgba(140, 124, 240, 0.5);\n  color: #8c7cf0;\n  font-weight: bold;\n  text-transform: none;\n  padding-left: 16px;\n  padding-right: 16px;\n  padding: 8px 20px;\n  margin: 9px;\n  &:hover {\n    -webkit-text-decoration: none;\n    text-decoration: none;\n    background-color: rgba(140, 124, 240, 0.1);\n    border: 1px solid #8c7cf0;\n  }\n`;\n\n/**\n * * if user sign up with out google sso, please put this image to verify profile photo\n * ? <Chip avatar={<Avatar>M</Avatar>} label=\"Avatar\" />\n */\n\nconst label = { inputProps: { 'aria-label': 'Switch demo' } };\ninterface State {\n  password: string;\n  confPassword: string;\n\n  showPassword: boolean;\n  showConfPassword: boolean;\n}\nconst SignIn = () => {\n  const dispatch = useTypedDispatch();\n  const nav = useNavigate();\n\n  const [values, setValues] = React.useState<State>({\n    password: '',\n    confPassword: '',\n    showPassword: false,\n    showConfPassword: false\n  });\n  const handleChange =\n    (prop: keyof State) => (event: React.ChangeEvent<HTMLInputElement>) => {\n      setValues({ ...values, [prop]: event.target.value });\n    };\n  const handleConfChange =\n    (prop: keyof State) => (event: React.ChangeEvent<HTMLInputElement>) => {\n      setValues({ ...values, [prop]: event.target.value });\n    };\n  const handleClickShowPassword = () => {\n    setValues({\n      ...values,\n      showPassword: !values.showPassword\n    });\n  };\n\n  const handleClickShowConfPassword = () => {\n    setValues({\n      ...values,\n      showConfPassword: !values.showConfPassword\n    });\n  };\n\n  const handleMouseDownPassword = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    event.preventDefault();\n  };\n  const handleMouseDownConfPassword = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    event.preventDefault();\n  };\n\n  const onFinish = (values: any) => {\n    dispatch(userSignIn({ ...values }, (notification) => notification, nav));\n  };\n  const onFinishFailed = (errorInfo: any) => {\n    console.log('Failed:', errorInfo);\n  };\n  return (\n    <>\n      <Toaster />\n      <Helmet>\n        <title>SignIn page</title>\n      </Helmet>\n      <Container maxWidth=\"lg\">\n        <Grid\n          container\n          direction=\"row\"\n          justifyContent=\"center\"\n          alignItems=\"stretch\"\n          spacing={3}\n          pt={5}\n        >\n          <Grid\n            item\n            xs={12}\n            display=\"flex\"\n            flexDirection=\"column\"\n            textAlign=\"center\"\n          >\n            <Card>\n              <Box\n                justifyContent=\"space-between\"\n                flexDirection=\"row\"\n                display=\"flex\"\n                textAlign=\"center\"\n              >\n                <Link to=\"/dashboards/tasks\">\n                  <CardHeader title=\"Are you ready have account?\" />\n                </Link>\n                <CardHeader title=\"Log-In Page\" />\n              </Box>\n              <Divider />\n              <Typography variant=\"h3\" pt={2} pb={2} />\n\n              <Form\n                name=\"basic\"\n                wrapperCol={{ span: 6 }}\n                initialValues={{ remember: true }}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"on\"\n              >\n                <Box\n                  display=\"flex\"\n                  flexDirection=\"row\"\n                  textAlign=\"center\"\n                  justifyContent=\"center\"\n                  pt={1}\n                  pb={1}\n                >\n                  <Form.Item\n                    name=\"firstName\"\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Please input your firstname!'\n                      }\n                    ]}\n                    style={{ paddingRight: '10px' }}\n                  >\n                    <TextField required label=\"Firstname\" />\n                  </Form.Item>\n                  <Form.Item\n                    name=\"lastName\"\n                    rules={[\n                      { required: true, message: 'Please input your Lastname!' }\n                    ]}\n                  >\n                    <TextField required label=\"Lastname\" />\n                  </Form.Item>\n                </Box>\n\n                <Box\n                  display=\"flex\"\n                  flexDirection=\"row\"\n                  textAlign=\"center\"\n                  justifyContent=\"center\"\n                  pt={1}\n                  pb={1}\n                >\n                  <Form.Item\n                    name=\"password\"\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Please input your phone password!'\n                      }\n                    ]}\n                    style={{ paddingRight: '10px' }}\n                  >\n                    <FormControl required variant=\"outlined\">\n                      <InputLabel htmlFor=\"outlined-adornment-password\">\n                        Password\n                      </InputLabel>\n                      <OutlinedInput\n                        id=\"outlined-adornment-password\"\n                        type={values.showPassword ? 'text' : 'password'}\n                        value={values.password}\n                        onChange={handleChange('password')}\n                        endAdornment={\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              aria-label=\"toggle password visibility\"\n                              onClick={handleClickShowPassword}\n                              onMouseDown={handleMouseDownPassword}\n                              edge=\"end\"\n                            >\n                              {values.showPassword ? (\n                                <VisibilityOff />\n                              ) : (\n                                <Visibility />\n                              )}\n                            </IconButton>\n                          </InputAdornment>\n                        }\n                        label=\"Password\"\n                      />\n                    </FormControl>\n                  </Form.Item>\n                  <Form.Item\n                    name=\"confirmPassword\"\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Please input your confirm password!'\n                      }\n                    ]}\n                  >\n                    <FormControl required variant=\"outlined\">\n                      <InputLabel htmlFor=\"outlined-adornment-password\">\n                        Confirm\n                      </InputLabel>\n                      <OutlinedInput\n                        id=\"outlined-adornment-password\"\n                        type={values.showConfPassword ? 'text' : 'password'}\n                        value={values.confPassword}\n                        onChange={handleConfChange('confPassword')}\n                        endAdornment={\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              aria-label=\"toggle password visibility\"\n                              onClick={handleClickShowConfPassword}\n                              onMouseDown={handleMouseDownConfPassword}\n                              edge=\"end\"\n                            >\n                              {values.showConfPassword ? (\n                                <VisibilityOff />\n                              ) : (\n                                <Visibility />\n                              )}\n                            </IconButton>\n                          </InputAdornment>\n                        }\n                        label=\"Password\"\n                      />\n                    </FormControl>\n                  </Form.Item>\n                </Box>\n\n                <Box\n                  display=\"flex\"\n                  flexDirection=\"row\"\n                  textAlign=\"center\"\n                  justifyContent=\"center\"\n                  pt={1}\n                  pb={1}\n                >\n                  <Form.Item\n                    name=\"cellPhone\"\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Please input your phone number!'\n                      }\n                    ]}\n                    style={{ paddingRight: '10px' }}\n                  >\n                    <TextField required label=\"Phone Number\" type=\"tel\" />\n                  </Form.Item>\n                  <Form.Item\n                    name=\"email\"\n                    rules={[\n                      { required: true, message: 'Please input your email!' }\n                    ]}\n                    style={{ paddingRight: '10px' }}\n                  >\n                    <TextField required label=\"Email\" type=\"email\" />\n                  </Form.Item>\n                </Box>\n\n                <Box\n                  display=\"flex\"\n                  flexDirection=\"row\"\n                  textAlign=\"center\"\n                  justifyContent=\"center\"\n                  pt={1}\n                  pb={1}\n                >\n                  <Form.Item\n                    name=\"address\"\n                    rules={[\n                      { required: true, message: 'Please input your address!' }\n                    ]}\n                  >\n                    <TextField required label=\"Address\" />\n                  </Form.Item>\n                </Box>\n\n                <Box\n                  display=\"flex\"\n                  flexDirection=\"row-reverse\"\n                  justifyContent=\"center\"\n                  alignItems=\"baseline\"\n                  textAlign=\"center\"\n                >\n                  <Form.Item\n                    name=\"remember\"\n                    valuePropName=\"checked\"\n                    wrapperCol={{ offset: 8, span: 16 }}\n                  >\n                    <Checkbox\n                      {...label}\n                      defaultChecked\n                      sx={{\n                        color: pink[800],\n                        '&.Mui-checked': {\n                          color: pink[600]\n                        }\n                      }}\n                    />\n                  </Form.Item>\n                  <span>Remember me:</span>\n                </Box>\n                <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n                  <MyButton type=\"primary\" htmlType=\"submit\">\n                    Submit\n                  </MyButton>\n                </Form.Item>\n              </Form>\n            </Card>\n          </Grid>\n        </Grid>\n      </Container>\n      <Footer />\n    </>\n  );\n};\n\nexport default SignIn;\n"],"names":["MyButton","styled","Button","label","inputProps","prop","dispatch","useTypedDispatch","nav","useNavigate","React","password","confPassword","showPassword","showConfPassword","values","setValues","maxWidth","container","direction","justifyContent","alignItems","spacing","pt","item","xs","display","flexDirection","textAlign","to","title","variant","pb","name","wrapperCol","span","initialValues","remember","onFinish","userSignIn","notification","onFinishFailed","errorInfo","console","log","autoComplete","rules","required","message","style","paddingRight","htmlFor","id","type","value","onChange","event","target","endAdornment","position","onClick","onMouseDown","preventDefault","edge","handleConfChange","valuePropName","offset","defaultChecked","sx","color","pink","htmlType"],"sourceRoot":""}